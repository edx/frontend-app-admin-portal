// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CodeAssignmentModal /> renders correctly with invalid as true 1`] = `
<CodeAssignmentModalWrapper
  data={
    Object {
      "code": "XOKASOKDIO",
      "remainingUses": 1337,
    }
  }
  onClose={[Function]}
  title="My title"
>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <ReduxForm
      data={
        Object {
          "code": "XOKASOKDIO",
          "remainingUses": 1337,
        }
      }
      onClose={[Function]}
      title="My title"
    >
      <Connect(Form(CodeAssignmentModal))
        data={
          Object {
            "code": "XOKASOKDIO",
            "remainingUses": 1337,
          }
        }
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="code-assignment-modal-form"
        getFormState={[Function]}
        initialValues={
          Object {
            "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
          }
        }
        keepDirtyOnReinitialize={false}
        onClose={[Function]}
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        title="My title"
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      >
        <Form(CodeAssignmentModal)
          anyTouched={false}
          array={
            Object {
              "insert": [Function],
              "move": [Function],
              "pop": [Function],
              "push": [Function],
              "remove": [Function],
              "removeAll": [Function],
              "shift": [Function],
              "splice": [Function],
              "swap": [Function],
              "unshift": [Function],
            }
          }
          arrayInsert={[Function]}
          arrayMove={[Function]}
          arrayPop={[Function]}
          arrayPush={[Function]}
          arrayRemove={[Function]}
          arrayRemoveAll={[Function]}
          arrayShift={[Function]}
          arraySplice={[Function]}
          arraySwap={[Function]}
          arrayUnshift={[Function]}
          asyncValidating={false}
          autofill={[Function]}
          blur={[Function]}
          change={[Function]}
          clearAsyncError={[Function]}
          clearFields={[Function]}
          clearSubmit={[Function]}
          clearSubmitErrors={[Function]}
          data={
            Object {
              "code": "XOKASOKDIO",
              "remainingUses": 1337,
            }
          }
          destroy={[Function]}
          destroyOnUnmount={true}
          dirty={false}
          dispatch={[Function]}
          enableReinitialize={false}
          focus={[Function]}
          forceUnregisterOnUnmount={false}
          form="code-assignment-modal-form"
          getFormState={[Function]}
          initialValues={
            Object {
              "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
            }
          }
          initialize={[Function]}
          initialized={false}
          invalid={false}
          keepDirtyOnReinitialize={false}
          onClose={[Function]}
          persistentSubmitErrors={false}
          pristine={true}
          pure={true}
          registerField={[Function]}
          reset={[Function]}
          resetSection={[Function]}
          setSubmitFailed={[Function]}
          setSubmitSucceeded={[Function]}
          shouldAsyncValidate={[Function]}
          shouldError={[Function]}
          shouldValidate={[Function]}
          shouldWarn={[Function]}
          startAsyncValidation={[Function]}
          startSubmit={[Function]}
          stopAsyncValidation={[Function]}
          stopSubmit={[Function]}
          submit={[Function]}
          submitFailed={false}
          submitSucceeded={false}
          submitting={false}
          syncErrors={Object {}}
          syncWarnings={Object {}}
          title="My title"
          touch={[Function]}
          touchOnBlur={true}
          touchOnChange={false}
          unregisterField={[Function]}
          untouch={[Function]}
          updateSyncErrors={[Function]}
          updateSyncWarnings={[Function]}
          updateUnregisteredFields={false}
          valid={true}
          validExceptSubmit={true}
          values={
            Object {
              "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
            }
          }
        >
          <CodeAssignmentModal
            anyTouched={false}
            array={
              Object {
                "insert": [Function],
                "move": [Function],
                "pop": [Function],
                "push": [Function],
                "remove": [Function],
                "removeAll": [Function],
                "shift": [Function],
                "splice": [Function],
                "swap": [Function],
                "unshift": [Function],
              }
            }
            asyncValidate={[Function]}
            asyncValidating={false}
            autofill={[Function]}
            blur={[Function]}
            change={[Function]}
            clearAsyncError={[Function]}
            clearFields={[Function]}
            clearSubmit={[Function]}
            clearSubmitErrors={[Function]}
            data={
              Object {
                "code": "XOKASOKDIO",
                "remainingUses": 1337,
              }
            }
            destroy={[Function]}
            dirty={false}
            dispatch={[Function]}
            error={null}
            form="code-assignment-modal-form"
            handleSubmit={[Function]}
            initialValues={
              Object {
                "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
              }
            }
            initialize={[Function]}
            initialized={false}
            invalid={false}
            isBulkAssign={false}
            isOpen={false}
            onClose={[Function]}
            pristine={true}
            pure={true}
            reset={[Function]}
            resetSection={[Function]}
            submit={[Function]}
            submitFailed={false}
            submitSucceeded={false}
            submitting={false}
            title="My title"
            touch={[Function]}
            untouch={[Function]}
            valid={true}
          >
            <t
              body={
                <React.Fragment>
                  <div
                    className="assignment-details mb-4"
                  >
                    <React.Fragment>
                      <p>
                        Code: 
                        XOKASOKDIO
                      </p>
                      <p>
                        Remaining Uses: 
                        1337
                      </p>
                    </React.Fragment>
                  </div>
                  <form
                    onSubmit={[Function]}
                  >
                    <IndividualAssignFields />
                    <div
                      className="mt-4"
                    >
                      <H3
                        className={null}
                      >
                        Email Template
                      </H3>
                      <Field
                        component={[Function]}
                        id="email-template"
                        label={
                          <React.Fragment>
                            Customize Message
                            <span
                              className="required"
                            >
                              *
                            </span>
                          </React.Fragment>
                        }
                        name="email-template"
                        required={true}
                        validate={
                          Array [
                            [Function],
                          ]
                        }
                      />
                    </div>
                  </form>
                </React.Fragment>
              }
              buttons={
                Array [
                  <t
                    buttonType="primary"
                    className={Array []}
                    disabled={false}
                    inputRef={[Function]}
                    isClose={false}
                    label={
                      <React.Fragment>
                        Assign Code
                      </React.Fragment>
                    }
                    onBlur={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    type="button"
                  />,
                ]
              }
              closeText="Close"
              onClose={[Function]}
              open={false}
              parentSelector="body"
              renderHeaderCloseButton={true}
              title={
                <React.Fragment>
                  <span
                    className="d-block"
                  >
                    My title
                  </span>
                  <small>
                    Code Assignment
                  </small>
                </React.Fragment>
              }
              variant={Object {}}
            >
              <Portal
                containerInfo={
                  <div>
                    <div>
                      <div
                        class="fade"
                        role="presentation"
                      />
                      <div
                        class="modal js-close-modal-on-click fade"
                        role="presentation"
                      >
                        <div
                          aria-labelledby="id6"
                          aria-modal="true"
                          class=""
                          role="dialog"
                        >
                          <div
                            class="modal-content"
                          >
                            <div
                              class="modal-header"
                            >
                              <h2
                                class="modal-title"
                                id="id6"
                              >
                                <span
                                  class="d-block"
                                >
                                  My title
                                </span>
                                <small>
                                  Code Assignment
                                </small>
                              </h2>
                              <button
                                aria-labelledby="paragonCloseModalButton2"
                                class="btn p-1 js-close-modal-on-click"
                                type="button"
                              >
                                <span
                                  aria-hidden="true"
                                  class="fa fa-times js-close-modal-on-click"
                                  id="Icon1"
                                />
                              </button>
                            </div>
                            <div
                              class="modal-body"
                            >
                              <div
                                class="assignment-details mb-4"
                              >
                                <p>
                                  Code: 
                                  XOKASOKDIO
                                </p>
                                <p>
                                  Remaining Uses: 
                                  1337
                                </p>
                              </div>
                              <form>
                                <h3>
                                  Add User
                                </h3>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    class=""
                                    for="asInput7"
                                    id="label-asInput7"
                                  >
                                    Email Address
                                    <span
                                      class="required"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    aria-describedby="error-asInput7"
                                    aria-invalid="false"
                                    autocomplete="on"
                                    class="form-control"
                                    id="asInput7"
                                    name="email-address"
                                    required=""
                                    themes="danger"
                                    type="email"
                                    value=""
                                  />
                                  <div
                                    aria-live="polite"
                                    class="invalid-feedback"
                                    id="error-asInput7"
                                  >
                                    <span />
                                  </div>
                                </div>
                                <div
                                  class="mt-4"
                                >
                                  <h3>
                                    Email Template
                                  </h3>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="email-template"
                                    >
                                      Customize Message
                                      <span
                                        class="required"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <textarea
                                      class="form-control"
                                      id="email-template"
                                      name="email-template"
                                      required=""
                                      style="height: 0px;"
                                    />
                                    <div
                                      aria-live="polite"
                                      class="invalid-feedback"
                                      id="validation-email-template"
                                    >
                                      <span />
                                    </div>
                                  </div>
                                </div>
                              </form>
                            </div>
                            <div
                              class="modal-footer"
                            >
                              <button
                                class="btn btn-primary"
                                type="button"
                              >
                                Assign Code
                              </button>
                              <button
                                class="btn js-close-modal-on-click btn-secondary"
                                type="button"
                              >
                                Close
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                }
              >
                <div>
                  <div
                    className="fade"
                    role="presentation"
                  />
                  <div
                    className="modal js-close-modal-on-click fade"
                    onClick={[Function]}
                    role="presentation"
                  >
                    <div
                      aria-labelledby="id6"
                      aria-modal={true}
                      className=""
                      role="dialog"
                    >
                      <div
                        className="modal-content"
                      >
                        <div
                          className="modal-header"
                        >
                          <h2
                            className="modal-title"
                            id="id6"
                          >
                            <span
                              className="d-block"
                            >
                              My title
                            </span>
                            <small>
                              Code Assignment
                            </small>
                          </h2>
                          <t
                            aria-labelledby="paragonCloseModalButton2"
                            className={
                              Array [
                                "p-1",
                                "js-close-modal-on-click",
                              ]
                            }
                            inputRef={[Function]}
                            isClose={false}
                            label={
                              <u
                                className={
                                  Array [
                                    "fa",
                                    "fa-times",
                                    "js-close-modal-on-click",
                                  ]
                                }
                                hidden={true}
                                id="Icon1"
                              />
                            }
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              aria-labelledby="paragonCloseModalButton2"
                              className="btn p-1 js-close-modal-on-click"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              <u
                                className={
                                  Array [
                                    "fa",
                                    "fa-times",
                                    "js-close-modal-on-click",
                                  ]
                                }
                                hidden={true}
                                id="Icon1"
                              >
                                <span
                                  aria-hidden={true}
                                  className="fa fa-times js-close-modal-on-click"
                                  id="Icon1"
                                />
                              </u>
                            </button>
                          </t>
                        </div>
                        <div
                          className="modal-body"
                        >
                          <div
                            className="assignment-details mb-4"
                          >
                            <p>
                              Code: 
                              XOKASOKDIO
                            </p>
                            <p>
                              Remaining Uses: 
                              1337
                            </p>
                          </div>
                          <form
                            onSubmit={[Function]}
                          >
                            <IndividualAssignFields>
                              <h3>
                                Add User
                              </h3>
                              <Field
                                component={[Function]}
                                label={
                                  <React.Fragment>
                                    Email Address
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </React.Fragment>
                                }
                                name="email-address"
                                required={true}
                                type="email"
                                validate={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "code": "XOKASOKDIO",
                                        "remainingUses": 1337,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  label={
                                    <React.Fragment>
                                      Email Address
                                      <span
                                        className="required"
                                      >
                                        *
                                      </span>
                                    </React.Fragment>
                                  }
                                  name="email-address"
                                  normalize={[Function]}
                                  required={true}
                                  type="email"
                                  validate={
                                    Array [
                                      [Function],
                                      [Function],
                                    ]
                                  }
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "code": "XOKASOKDIO",
                                          "remainingUses": 1337,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={false}
                                    dispatch={[Function]}
                                    label={
                                      <React.Fragment>
                                        Email Address
                                        <span
                                          className="required"
                                        >
                                          *
                                        </span>
                                      </React.Fragment>
                                    }
                                    name="email-address"
                                    normalize={[Function]}
                                    pristine={true}
                                    required={true}
                                    type="email"
                                    validate={
                                      Array [
                                        [Function],
                                        [Function],
                                      ]
                                    }
                                  >
                                    <RenderField
                                      disabled={false}
                                      input={
                                        Object {
                                          "name": "email-address",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label={
                                        <React.Fragment>
                                          Email Address
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </React.Fragment>
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": undefined,
                                          "invalid": false,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      required={true}
                                      type="email"
                                    >
                                      <asInput(f)
                                        className={Array []}
                                        dangerIconDescription=""
                                        disabled={false}
                                        inline={false}
                                        isValid={true}
                                        label={
                                          <React.Fragment>
                                            Email Address
                                            <span
                                              className="required"
                                            >
                                              *
                                            </span>
                                          </React.Fragment>
                                        }
                                        name="email-address"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onDragStart={[Function]}
                                        onDrop={[Function]}
                                        onFocus={[Function]}
                                        onKeyPress={[Function]}
                                        required={true}
                                        themes={
                                          Array [
                                            "danger",
                                          ]
                                        }
                                        type="email"
                                        validationMessage=""
                                        value=""
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <label
                                            className=""
                                            htmlFor="asInput7"
                                            id="label-asInput7"
                                          >
                                            Email Address
                                            <span
                                              className="required"
                                            >
                                              *
                                            </span>
                                          </label>
                                          <f
                                            autoComplete="on"
                                            className={
                                              Array [
                                                "form-control",
                                              ]
                                            }
                                            dangerIconDescription=""
                                            describedBy="error-asInput7"
                                            descriptionId="description-asInput7"
                                            disabled={false}
                                            errorId="error-asInput7"
                                            id="asInput7"
                                            inline={false}
                                            inputRef={[Function]}
                                            isValid={true}
                                            label={
                                              <React.Fragment>
                                                Email Address
                                                <span
                                                  className="required"
                                                >
                                                  *
                                                </span>
                                              </React.Fragment>
                                            }
                                            name="email-address"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onDragStart={[Function]}
                                            onDrop={[Function]}
                                            onFocus={[Function]}
                                            onKeyPress={[Function]}
                                            readOnly={false}
                                            required={true}
                                            themes={
                                              Array [
                                                "danger",
                                              ]
                                            }
                                            type="email"
                                            validationMessage=""
                                            value=""
                                          >
                                            <input
                                              aria-describedby="error-asInput7"
                                              aria-invalid={false}
                                              autoComplete="on"
                                              className="form-control"
                                              disabled={false}
                                              id="asInput7"
                                              name="email-address"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyPress={[Function]}
                                              readOnly={false}
                                              required={true}
                                              themes={
                                                Array [
                                                  "danger",
                                                ]
                                              }
                                              type="email"
                                              value=""
                                            />
                                          </f>
                                          <t
                                            className=""
                                            id="error-asInput7"
                                            invalidMessage=""
                                            isValid={true}
                                            variant={
                                              Object {
                                                "status": "DANGER",
                                              }
                                            }
                                            variantIconDescription=""
                                          >
                                            <div
                                              aria-live="polite"
                                              className="invalid-feedback"
                                              id="error-asInput7"
                                            >
                                              <span />
                                            </div>
                                          </t>
                                        </div>
                                      </asInput(f)>
                                    </RenderField>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                            </IndividualAssignFields>
                            <div
                              className="mt-4"
                            >
                              <H3
                                className={null}
                              >
                                <h3
                                  className={null}
                                >
                                  Email Template
                                </h3>
                              </H3>
                              <Field
                                component={[Function]}
                                id="email-template"
                                label={
                                  <React.Fragment>
                                    Customize Message
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </React.Fragment>
                                }
                                name="email-template"
                                required={true}
                                validate={
                                  Array [
                                    [Function],
                                  ]
                                }
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "code": "XOKASOKDIO",
                                        "remainingUses": 1337,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="email-template"
                                  label={
                                    <React.Fragment>
                                      Customize Message
                                      <span
                                        className="required"
                                      >
                                        *
                                      </span>
                                    </React.Fragment>
                                  }
                                  name="email-template"
                                  normalize={[Function]}
                                  required={true}
                                  validate={
                                    Array [
                                      [Function],
                                    ]
                                  }
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "code": "XOKASOKDIO",
                                          "remainingUses": 1337,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={true}
                                    dispatch={[Function]}
                                    id="email-template"
                                    initial="Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
"
                                    label={
                                      <React.Fragment>
                                        Customize Message
                                        <span
                                          className="required"
                                        >
                                          *
                                        </span>
                                      </React.Fragment>
                                    }
                                    name="email-template"
                                    normalize={[Function]}
                                    pristine={false}
                                    required={true}
                                    validate={
                                      Array [
                                        [Function],
                                      ]
                                    }
                                  >
                                    <TextAreaAutoSize
                                      id="email-template"
                                      input={
                                        Object {
                                          "name": "email-template",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label={
                                        <React.Fragment>
                                          Customize Message
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </React.Fragment>
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": true,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                          "invalid": false,
                                          "pristine": false,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      required={true}
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <label
                                          htmlFor="email-template"
                                        >
                                          Customize Message
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </label>
                                        <TextareaAutosize
                                          className="form-control"
                                          id="email-template"
                                          inputRef={[Function]}
                                          maxRows={10}
                                          minRows={3}
                                          name="email-template"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          onHeightChange={[Function]}
                                          required={true}
                                          useCacheForDOMMeasurements={false}
                                          value=""
                                        >
                                          <textarea
                                            className="form-control"
                                            id="email-template"
                                            name="email-template"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onDragStart={[Function]}
                                            onDrop={[Function]}
                                            onFocus={[Function]}
                                            required={true}
                                            style={
                                              Object {
                                                "height": 0,
                                              }
                                            }
                                            value=""
                                          />
                                        </TextareaAutosize>
                                        <t
                                          className=""
                                          id="validation-email-template"
                                          invalidMessage=""
                                          isValid={true}
                                          variant={
                                            Object {
                                              "status": "DANGER",
                                            }
                                          }
                                          variantIconDescription=""
                                        >
                                          <div
                                            aria-live="polite"
                                            className="invalid-feedback"
                                            id="validation-email-template"
                                          >
                                            <span />
                                          </div>
                                        </t>
                                      </div>
                                    </TextAreaAutoSize>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                            </div>
                          </form>
                        </div>
                        <div
                          className="modal-footer"
                        >
                          <t
                            buttonType="primary"
                            className={Array []}
                            disabled={false}
                            inputRef={[Function]}
                            isClose={false}
                            key="0"
                            label={
                              <React.Fragment>
                                Assign Code
                              </React.Fragment>
                            }
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              Assign Code
                            </button>
                          </t>
                          <t
                            buttonType="secondary"
                            className={
                              Array [
                                "js-close-modal-on-click",
                              ]
                            }
                            inputRef={[Function]}
                            isClose={false}
                            label="Close"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              className="btn js-close-modal-on-click btn-secondary"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              Close
                            </button>
                          </t>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Portal>
            </t>
          </CodeAssignmentModal>
        </Form(CodeAssignmentModal)>
      </Connect(Form(CodeAssignmentModal))>
    </ReduxForm>
  </Provider>
</CodeAssignmentModalWrapper>
`;

exports[`<CodeAssignmentModal /> renders correctly with isBulkAssign as false 1`] = `
<CodeAssignmentModalWrapper
  data={
    Object {
      "unassignedCodes": 3,
    }
  }
  isBulkAssign={false}
  onClose={[Function]}
  title="My title"
>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <ReduxForm
      data={
        Object {
          "unassignedCodes": 3,
        }
      }
      isBulkAssign={false}
      onClose={[Function]}
      title="My title"
    >
      <Connect(Form(CodeAssignmentModal))
        data={
          Object {
            "unassignedCodes": 3,
          }
        }
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="code-assignment-modal-form"
        getFormState={[Function]}
        initialValues={
          Object {
            "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
          }
        }
        isBulkAssign={false}
        keepDirtyOnReinitialize={false}
        onClose={[Function]}
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        title="My title"
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      >
        <Form(CodeAssignmentModal)
          anyTouched={false}
          array={
            Object {
              "insert": [Function],
              "move": [Function],
              "pop": [Function],
              "push": [Function],
              "remove": [Function],
              "removeAll": [Function],
              "shift": [Function],
              "splice": [Function],
              "swap": [Function],
              "unshift": [Function],
            }
          }
          arrayInsert={[Function]}
          arrayMove={[Function]}
          arrayPop={[Function]}
          arrayPush={[Function]}
          arrayRemove={[Function]}
          arrayRemoveAll={[Function]}
          arrayShift={[Function]}
          arraySplice={[Function]}
          arraySwap={[Function]}
          arrayUnshift={[Function]}
          asyncValidating={false}
          autofill={[Function]}
          blur={[Function]}
          change={[Function]}
          clearAsyncError={[Function]}
          clearFields={[Function]}
          clearSubmit={[Function]}
          clearSubmitErrors={[Function]}
          data={
            Object {
              "unassignedCodes": 3,
            }
          }
          destroy={[Function]}
          destroyOnUnmount={true}
          dirty={false}
          dispatch={[Function]}
          enableReinitialize={false}
          focus={[Function]}
          forceUnregisterOnUnmount={false}
          form="code-assignment-modal-form"
          getFormState={[Function]}
          initialValues={
            Object {
              "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
            }
          }
          initialize={[Function]}
          initialized={false}
          invalid={false}
          isBulkAssign={false}
          keepDirtyOnReinitialize={false}
          onClose={[Function]}
          persistentSubmitErrors={false}
          pristine={true}
          pure={true}
          registerField={[Function]}
          reset={[Function]}
          resetSection={[Function]}
          setSubmitFailed={[Function]}
          setSubmitSucceeded={[Function]}
          shouldAsyncValidate={[Function]}
          shouldError={[Function]}
          shouldValidate={[Function]}
          shouldWarn={[Function]}
          startAsyncValidation={[Function]}
          startSubmit={[Function]}
          stopAsyncValidation={[Function]}
          stopSubmit={[Function]}
          submit={[Function]}
          submitFailed={false}
          submitSucceeded={false}
          submitting={false}
          syncErrors={Object {}}
          syncWarnings={Object {}}
          title="My title"
          touch={[Function]}
          touchOnBlur={true}
          touchOnChange={false}
          unregisterField={[Function]}
          untouch={[Function]}
          updateSyncErrors={[Function]}
          updateSyncWarnings={[Function]}
          updateUnregisteredFields={false}
          valid={true}
          validExceptSubmit={true}
          values={
            Object {
              "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
            }
          }
        >
          <CodeAssignmentModal
            anyTouched={false}
            array={
              Object {
                "insert": [Function],
                "move": [Function],
                "pop": [Function],
                "push": [Function],
                "remove": [Function],
                "removeAll": [Function],
                "shift": [Function],
                "splice": [Function],
                "swap": [Function],
                "unshift": [Function],
              }
            }
            asyncValidate={[Function]}
            asyncValidating={false}
            autofill={[Function]}
            blur={[Function]}
            change={[Function]}
            clearAsyncError={[Function]}
            clearFields={[Function]}
            clearSubmit={[Function]}
            clearSubmitErrors={[Function]}
            data={
              Object {
                "unassignedCodes": 3,
              }
            }
            destroy={[Function]}
            dirty={false}
            dispatch={[Function]}
            error={null}
            form="code-assignment-modal-form"
            handleSubmit={[Function]}
            initialValues={
              Object {
                "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
              }
            }
            initialize={[Function]}
            initialized={false}
            invalid={false}
            isBulkAssign={false}
            isOpen={false}
            onClose={[Function]}
            pristine={true}
            pure={true}
            reset={[Function]}
            resetSection={[Function]}
            submit={[Function]}
            submitFailed={false}
            submitSucceeded={false}
            submitting={false}
            title="My title"
            touch={[Function]}
            untouch={[Function]}
            valid={true}
          >
            <t
              body={
                <React.Fragment>
                  <div
                    className="assignment-details mb-4"
                  />
                  <form
                    onSubmit={[Function]}
                  >
                    <IndividualAssignFields />
                    <div
                      className="mt-4"
                    >
                      <H3
                        className={null}
                      >
                        Email Template
                      </H3>
                      <Field
                        component={[Function]}
                        id="email-template"
                        label={
                          <React.Fragment>
                            Customize Message
                            <span
                              className="required"
                            >
                              *
                            </span>
                          </React.Fragment>
                        }
                        name="email-template"
                        required={true}
                        validate={
                          Array [
                            [Function],
                          ]
                        }
                      />
                    </div>
                  </form>
                </React.Fragment>
              }
              buttons={
                Array [
                  <t
                    buttonType="primary"
                    className={Array []}
                    disabled={false}
                    inputRef={[Function]}
                    isClose={false}
                    label={
                      <React.Fragment>
                        Assign Code
                      </React.Fragment>
                    }
                    onBlur={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    type="button"
                  />,
                ]
              }
              closeText="Close"
              onClose={[Function]}
              open={false}
              parentSelector="body"
              renderHeaderCloseButton={true}
              title={
                <React.Fragment>
                  <span
                    className="d-block"
                  >
                    My title
                  </span>
                  <small>
                    Code Assignment
                  </small>
                </React.Fragment>
              }
              variant={Object {}}
            >
              <Portal
                containerInfo={
                  <div>
                    <div>
                      <div
                        class="fade"
                        role="presentation"
                      />
                      <div
                        class="modal js-close-modal-on-click fade"
                        role="presentation"
                      >
                        <div
                          aria-labelledby="id4"
                          aria-modal="true"
                          class=""
                          role="dialog"
                        >
                          <div
                            class="modal-content"
                          >
                            <div
                              class="modal-header"
                            >
                              <h2
                                class="modal-title"
                                id="id4"
                              >
                                <span
                                  class="d-block"
                                >
                                  My title
                                </span>
                                <small>
                                  Code Assignment
                                </small>
                              </h2>
                              <button
                                aria-labelledby="paragonCloseModalButton2"
                                class="btn p-1 js-close-modal-on-click"
                                type="button"
                              >
                                <span
                                  aria-hidden="true"
                                  class="fa fa-times js-close-modal-on-click"
                                  id="Icon1"
                                />
                              </button>
                            </div>
                            <div
                              class="modal-body"
                            >
                              <div
                                class="assignment-details mb-4"
                              />
                              <form>
                                <h3>
                                  Add User
                                </h3>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    class=""
                                    for="asInput5"
                                    id="label-asInput5"
                                  >
                                    Email Address
                                    <span
                                      class="required"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    aria-describedby="error-asInput5"
                                    aria-invalid="false"
                                    autocomplete="on"
                                    class="form-control"
                                    id="asInput5"
                                    name="email-address"
                                    required=""
                                    themes="danger"
                                    type="email"
                                    value=""
                                  />
                                  <div
                                    aria-live="polite"
                                    class="invalid-feedback"
                                    id="error-asInput5"
                                  >
                                    <span />
                                  </div>
                                </div>
                                <div
                                  class="mt-4"
                                >
                                  <h3>
                                    Email Template
                                  </h3>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="email-template"
                                    >
                                      Customize Message
                                      <span
                                        class="required"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <textarea
                                      class="form-control"
                                      id="email-template"
                                      name="email-template"
                                      required=""
                                      style="height: 0px;"
                                    />
                                    <div
                                      aria-live="polite"
                                      class="invalid-feedback"
                                      id="validation-email-template"
                                    >
                                      <span />
                                    </div>
                                  </div>
                                </div>
                              </form>
                            </div>
                            <div
                              class="modal-footer"
                            >
                              <button
                                class="btn btn-primary"
                                type="button"
                              >
                                Assign Code
                              </button>
                              <button
                                class="btn js-close-modal-on-click btn-secondary"
                                type="button"
                              >
                                Close
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                }
              >
                <div>
                  <div
                    className="fade"
                    role="presentation"
                  />
                  <div
                    className="modal js-close-modal-on-click fade"
                    onClick={[Function]}
                    role="presentation"
                  >
                    <div
                      aria-labelledby="id4"
                      aria-modal={true}
                      className=""
                      role="dialog"
                    >
                      <div
                        className="modal-content"
                      >
                        <div
                          className="modal-header"
                        >
                          <h2
                            className="modal-title"
                            id="id4"
                          >
                            <span
                              className="d-block"
                            >
                              My title
                            </span>
                            <small>
                              Code Assignment
                            </small>
                          </h2>
                          <t
                            aria-labelledby="paragonCloseModalButton2"
                            className={
                              Array [
                                "p-1",
                                "js-close-modal-on-click",
                              ]
                            }
                            inputRef={[Function]}
                            isClose={false}
                            label={
                              <u
                                className={
                                  Array [
                                    "fa",
                                    "fa-times",
                                    "js-close-modal-on-click",
                                  ]
                                }
                                hidden={true}
                                id="Icon1"
                              />
                            }
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              aria-labelledby="paragonCloseModalButton2"
                              className="btn p-1 js-close-modal-on-click"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              <u
                                className={
                                  Array [
                                    "fa",
                                    "fa-times",
                                    "js-close-modal-on-click",
                                  ]
                                }
                                hidden={true}
                                id="Icon1"
                              >
                                <span
                                  aria-hidden={true}
                                  className="fa fa-times js-close-modal-on-click"
                                  id="Icon1"
                                />
                              </u>
                            </button>
                          </t>
                        </div>
                        <div
                          className="modal-body"
                        >
                          <div
                            className="assignment-details mb-4"
                          />
                          <form
                            onSubmit={[Function]}
                          >
                            <IndividualAssignFields>
                              <h3>
                                Add User
                              </h3>
                              <Field
                                component={[Function]}
                                label={
                                  <React.Fragment>
                                    Email Address
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </React.Fragment>
                                }
                                name="email-address"
                                required={true}
                                type="email"
                                validate={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "unassignedCodes": 3,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "isBulkAssign": false,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  label={
                                    <React.Fragment>
                                      Email Address
                                      <span
                                        className="required"
                                      >
                                        *
                                      </span>
                                    </React.Fragment>
                                  }
                                  name="email-address"
                                  normalize={[Function]}
                                  required={true}
                                  type="email"
                                  validate={
                                    Array [
                                      [Function],
                                      [Function],
                                    ]
                                  }
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "unassignedCodes": 3,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "isBulkAssign": false,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={false}
                                    dispatch={[Function]}
                                    label={
                                      <React.Fragment>
                                        Email Address
                                        <span
                                          className="required"
                                        >
                                          *
                                        </span>
                                      </React.Fragment>
                                    }
                                    name="email-address"
                                    normalize={[Function]}
                                    pristine={true}
                                    required={true}
                                    type="email"
                                    validate={
                                      Array [
                                        [Function],
                                        [Function],
                                      ]
                                    }
                                  >
                                    <RenderField
                                      disabled={false}
                                      input={
                                        Object {
                                          "name": "email-address",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label={
                                        <React.Fragment>
                                          Email Address
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </React.Fragment>
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": undefined,
                                          "invalid": false,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      required={true}
                                      type="email"
                                    >
                                      <asInput(f)
                                        className={Array []}
                                        dangerIconDescription=""
                                        disabled={false}
                                        inline={false}
                                        isValid={true}
                                        label={
                                          <React.Fragment>
                                            Email Address
                                            <span
                                              className="required"
                                            >
                                              *
                                            </span>
                                          </React.Fragment>
                                        }
                                        name="email-address"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onDragStart={[Function]}
                                        onDrop={[Function]}
                                        onFocus={[Function]}
                                        onKeyPress={[Function]}
                                        required={true}
                                        themes={
                                          Array [
                                            "danger",
                                          ]
                                        }
                                        type="email"
                                        validationMessage=""
                                        value=""
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <label
                                            className=""
                                            htmlFor="asInput5"
                                            id="label-asInput5"
                                          >
                                            Email Address
                                            <span
                                              className="required"
                                            >
                                              *
                                            </span>
                                          </label>
                                          <f
                                            autoComplete="on"
                                            className={
                                              Array [
                                                "form-control",
                                              ]
                                            }
                                            dangerIconDescription=""
                                            describedBy="error-asInput5"
                                            descriptionId="description-asInput5"
                                            disabled={false}
                                            errorId="error-asInput5"
                                            id="asInput5"
                                            inline={false}
                                            inputRef={[Function]}
                                            isValid={true}
                                            label={
                                              <React.Fragment>
                                                Email Address
                                                <span
                                                  className="required"
                                                >
                                                  *
                                                </span>
                                              </React.Fragment>
                                            }
                                            name="email-address"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onDragStart={[Function]}
                                            onDrop={[Function]}
                                            onFocus={[Function]}
                                            onKeyPress={[Function]}
                                            readOnly={false}
                                            required={true}
                                            themes={
                                              Array [
                                                "danger",
                                              ]
                                            }
                                            type="email"
                                            validationMessage=""
                                            value=""
                                          >
                                            <input
                                              aria-describedby="error-asInput5"
                                              aria-invalid={false}
                                              autoComplete="on"
                                              className="form-control"
                                              disabled={false}
                                              id="asInput5"
                                              name="email-address"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyPress={[Function]}
                                              readOnly={false}
                                              required={true}
                                              themes={
                                                Array [
                                                  "danger",
                                                ]
                                              }
                                              type="email"
                                              value=""
                                            />
                                          </f>
                                          <t
                                            className=""
                                            id="error-asInput5"
                                            invalidMessage=""
                                            isValid={true}
                                            variant={
                                              Object {
                                                "status": "DANGER",
                                              }
                                            }
                                            variantIconDescription=""
                                          >
                                            <div
                                              aria-live="polite"
                                              className="invalid-feedback"
                                              id="error-asInput5"
                                            >
                                              <span />
                                            </div>
                                          </t>
                                        </div>
                                      </asInput(f)>
                                    </RenderField>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                            </IndividualAssignFields>
                            <div
                              className="mt-4"
                            >
                              <H3
                                className={null}
                              >
                                <h3
                                  className={null}
                                >
                                  Email Template
                                </h3>
                              </H3>
                              <Field
                                component={[Function]}
                                id="email-template"
                                label={
                                  <React.Fragment>
                                    Customize Message
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </React.Fragment>
                                }
                                name="email-template"
                                required={true}
                                validate={
                                  Array [
                                    [Function],
                                  ]
                                }
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "unassignedCodes": 3,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "isBulkAssign": false,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="email-template"
                                  label={
                                    <React.Fragment>
                                      Customize Message
                                      <span
                                        className="required"
                                      >
                                        *
                                      </span>
                                    </React.Fragment>
                                  }
                                  name="email-template"
                                  normalize={[Function]}
                                  required={true}
                                  validate={
                                    Array [
                                      [Function],
                                    ]
                                  }
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "unassignedCodes": 3,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "isBulkAssign": false,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={true}
                                    dispatch={[Function]}
                                    id="email-template"
                                    initial="Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
"
                                    label={
                                      <React.Fragment>
                                        Customize Message
                                        <span
                                          className="required"
                                        >
                                          *
                                        </span>
                                      </React.Fragment>
                                    }
                                    name="email-template"
                                    normalize={[Function]}
                                    pristine={false}
                                    required={true}
                                    validate={
                                      Array [
                                        [Function],
                                      ]
                                    }
                                  >
                                    <TextAreaAutoSize
                                      id="email-template"
                                      input={
                                        Object {
                                          "name": "email-template",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label={
                                        <React.Fragment>
                                          Customize Message
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </React.Fragment>
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": true,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                          "invalid": false,
                                          "pristine": false,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      required={true}
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <label
                                          htmlFor="email-template"
                                        >
                                          Customize Message
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </label>
                                        <TextareaAutosize
                                          className="form-control"
                                          id="email-template"
                                          inputRef={[Function]}
                                          maxRows={10}
                                          minRows={3}
                                          name="email-template"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          onHeightChange={[Function]}
                                          required={true}
                                          useCacheForDOMMeasurements={false}
                                          value=""
                                        >
                                          <textarea
                                            className="form-control"
                                            id="email-template"
                                            name="email-template"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onDragStart={[Function]}
                                            onDrop={[Function]}
                                            onFocus={[Function]}
                                            required={true}
                                            style={
                                              Object {
                                                "height": 0,
                                              }
                                            }
                                            value=""
                                          />
                                        </TextareaAutosize>
                                        <t
                                          className=""
                                          id="validation-email-template"
                                          invalidMessage=""
                                          isValid={true}
                                          variant={
                                            Object {
                                              "status": "DANGER",
                                            }
                                          }
                                          variantIconDescription=""
                                        >
                                          <div
                                            aria-live="polite"
                                            className="invalid-feedback"
                                            id="validation-email-template"
                                          >
                                            <span />
                                          </div>
                                        </t>
                                      </div>
                                    </TextAreaAutoSize>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                            </div>
                          </form>
                        </div>
                        <div
                          className="modal-footer"
                        >
                          <t
                            buttonType="primary"
                            className={Array []}
                            disabled={false}
                            inputRef={[Function]}
                            isClose={false}
                            key="0"
                            label={
                              <React.Fragment>
                                Assign Code
                              </React.Fragment>
                            }
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              Assign Code
                            </button>
                          </t>
                          <t
                            buttonType="secondary"
                            className={
                              Array [
                                "js-close-modal-on-click",
                              ]
                            }
                            inputRef={[Function]}
                            isClose={false}
                            label="Close"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              className="btn js-close-modal-on-click btn-secondary"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              Close
                            </button>
                          </t>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Portal>
            </t>
          </CodeAssignmentModal>
        </Form(CodeAssignmentModal)>
      </Connect(Form(CodeAssignmentModal))>
    </ReduxForm>
  </Provider>
</CodeAssignmentModalWrapper>
`;

exports[`<CodeAssignmentModal /> renders correctly with isBulkAssign as true 1`] = `
<CodeAssignmentModalWrapper
  data={
    Object {
      "unassignedCodes": 3,
    }
  }
  isBulkAssign={true}
  onClose={[Function]}
  title="My title"
>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <ReduxForm
      data={
        Object {
          "unassignedCodes": 3,
        }
      }
      isBulkAssign={true}
      onClose={[Function]}
      title="My title"
    >
      <Connect(Form(CodeAssignmentModal))
        data={
          Object {
            "unassignedCodes": 3,
          }
        }
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="code-assignment-modal-form"
        getFormState={[Function]}
        initialValues={
          Object {
            "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
          }
        }
        isBulkAssign={true}
        keepDirtyOnReinitialize={false}
        onClose={[Function]}
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        title="My title"
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      >
        <Form(CodeAssignmentModal)
          anyTouched={false}
          array={
            Object {
              "insert": [Function],
              "move": [Function],
              "pop": [Function],
              "push": [Function],
              "remove": [Function],
              "removeAll": [Function],
              "shift": [Function],
              "splice": [Function],
              "swap": [Function],
              "unshift": [Function],
            }
          }
          arrayInsert={[Function]}
          arrayMove={[Function]}
          arrayPop={[Function]}
          arrayPush={[Function]}
          arrayRemove={[Function]}
          arrayRemoveAll={[Function]}
          arrayShift={[Function]}
          arraySplice={[Function]}
          arraySwap={[Function]}
          arrayUnshift={[Function]}
          asyncValidating={false}
          autofill={[Function]}
          blur={[Function]}
          change={[Function]}
          clearAsyncError={[Function]}
          clearFields={[Function]}
          clearSubmit={[Function]}
          clearSubmitErrors={[Function]}
          data={
            Object {
              "unassignedCodes": 3,
            }
          }
          destroy={[Function]}
          destroyOnUnmount={true}
          dirty={false}
          dispatch={[Function]}
          enableReinitialize={false}
          focus={[Function]}
          forceUnregisterOnUnmount={false}
          form="code-assignment-modal-form"
          getFormState={[Function]}
          initialValues={
            Object {
              "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
            }
          }
          initialize={[Function]}
          initialized={false}
          invalid={false}
          isBulkAssign={true}
          keepDirtyOnReinitialize={false}
          onClose={[Function]}
          persistentSubmitErrors={false}
          pristine={true}
          pure={true}
          registerField={[Function]}
          reset={[Function]}
          resetSection={[Function]}
          setSubmitFailed={[Function]}
          setSubmitSucceeded={[Function]}
          shouldAsyncValidate={[Function]}
          shouldError={[Function]}
          shouldValidate={[Function]}
          shouldWarn={[Function]}
          startAsyncValidation={[Function]}
          startSubmit={[Function]}
          stopAsyncValidation={[Function]}
          stopSubmit={[Function]}
          submit={[Function]}
          submitFailed={false}
          submitSucceeded={false}
          submitting={false}
          syncErrors={Object {}}
          syncWarnings={Object {}}
          title="My title"
          touch={[Function]}
          touchOnBlur={true}
          touchOnChange={false}
          unregisterField={[Function]}
          untouch={[Function]}
          updateSyncErrors={[Function]}
          updateSyncWarnings={[Function]}
          updateUnregisteredFields={false}
          valid={true}
          validExceptSubmit={true}
          values={
            Object {
              "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
            }
          }
        >
          <CodeAssignmentModal
            anyTouched={false}
            array={
              Object {
                "insert": [Function],
                "move": [Function],
                "pop": [Function],
                "push": [Function],
                "remove": [Function],
                "removeAll": [Function],
                "shift": [Function],
                "splice": [Function],
                "swap": [Function],
                "unshift": [Function],
              }
            }
            asyncValidate={[Function]}
            asyncValidating={false}
            autofill={[Function]}
            blur={[Function]}
            change={[Function]}
            clearAsyncError={[Function]}
            clearFields={[Function]}
            clearSubmit={[Function]}
            clearSubmitErrors={[Function]}
            data={
              Object {
                "unassignedCodes": 3,
              }
            }
            destroy={[Function]}
            dirty={false}
            dispatch={[Function]}
            error={null}
            form="code-assignment-modal-form"
            handleSubmit={[Function]}
            initialValues={
              Object {
                "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
              }
            }
            initialize={[Function]}
            initialized={false}
            invalid={false}
            isBulkAssign={true}
            isOpen={false}
            onClose={[Function]}
            pristine={true}
            pure={true}
            reset={[Function]}
            resetSection={[Function]}
            submit={[Function]}
            submitFailed={false}
            submitSucceeded={false}
            submitting={false}
            title="My title"
            touch={[Function]}
            untouch={[Function]}
            valid={true}
          >
            <t
              body={
                <React.Fragment>
                  <div
                    className="assignment-details mb-4"
                  >
                    <p>
                      <span
                        className="detail-label mr-1"
                      >
                        Unassigned Codes:
                      </span>
                      3
                    </p>
                  </div>
                  <form
                    onSubmit={[Function]}
                  >
                    <BulkAssignFields />
                    <div
                      className="mt-4"
                    >
                      <H3
                        className={null}
                      >
                        Email Template
                      </H3>
                      <Field
                        component={[Function]}
                        id="email-template"
                        label={
                          <React.Fragment>
                            Customize Message
                            <span
                              className="required"
                            >
                              *
                            </span>
                          </React.Fragment>
                        }
                        name="email-template"
                        required={true}
                        validate={
                          Array [
                            [Function],
                          ]
                        }
                      />
                    </div>
                  </form>
                </React.Fragment>
              }
              buttons={
                Array [
                  <t
                    buttonType="primary"
                    className={Array []}
                    disabled={false}
                    inputRef={[Function]}
                    isClose={false}
                    label={
                      <React.Fragment>
                        Assign Codes
                      </React.Fragment>
                    }
                    onBlur={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    type="button"
                  />,
                ]
              }
              closeText="Close"
              onClose={[Function]}
              open={false}
              parentSelector="body"
              renderHeaderCloseButton={true}
              title={
                <React.Fragment>
                  <span
                    className="d-block"
                  >
                    My title
                  </span>
                  <small>
                    Code Assignment
                  </small>
                </React.Fragment>
              }
              variant={Object {}}
            >
              <Portal
                containerInfo={
                  <div>
                    <div>
                      <div
                        class="fade"
                        role="presentation"
                      />
                      <div
                        class="modal js-close-modal-on-click fade"
                        role="presentation"
                      >
                        <div
                          aria-labelledby="id3"
                          aria-modal="true"
                          class=""
                          role="dialog"
                        >
                          <div
                            class="modal-content"
                          >
                            <div
                              class="modal-header"
                            >
                              <h2
                                class="modal-title"
                                id="id3"
                              >
                                <span
                                  class="d-block"
                                >
                                  My title
                                </span>
                                <small>
                                  Code Assignment
                                </small>
                              </h2>
                              <button
                                aria-labelledby="paragonCloseModalButton2"
                                class="btn p-1 js-close-modal-on-click"
                                type="button"
                              >
                                <span
                                  aria-hidden="true"
                                  class="fa fa-times js-close-modal-on-click"
                                  id="Icon1"
                                />
                              </button>
                            </div>
                            <div
                              class="modal-body"
                            >
                              <div
                                class="assignment-details mb-4"
                              >
                                <p>
                                  <span
                                    class="detail-label mr-1"
                                  >
                                    Unassigned Codes:
                                  </span>
                                  3
                                </p>
                              </div>
                              <form>
                                <h3>
                                  Add Users
                                </h3>
                                <p
                                  class="mb-3"
                                >
                                  To add users, enter their email addresses below or upload a CSV file.
                                </p>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="email-addresses"
                                  >
                                    Email Addresses
                                  </label>
                                  <textarea
                                    class="form-control"
                                    id="email-addresses"
                                    name="email-addresses"
                                    style="height: 0px;"
                                  />
                                  <div
                                    aria-live="polite"
                                    class="invalid-feedback"
                                    id="validation-email-addresses"
                                  >
                                    <span />
                                  </div>
                                  <small
                                    class="form-text"
                                    id="description-email-addresses"
                                  >
                                    Enter one email address per line.
                                  </small>
                                </div>
                                <div
                                  class="file-input form-group"
                                >
                                  <label
                                    class="d-block"
                                    for="csv-file-upload"
                                  >
                                    Upload Email Addresses
                                  </label>
                                  <label
                                    class="btn btn-outline-primary m-0"
                                    for="csv-file-upload"
                                  >
                                    <span
                                      aria-hidden="true"
                                      class="fa fa-upload mr-2"
                                      id="Icon1"
                                    />
                                    Choose a file
                                  </label>
                                  <input
                                    accept=".csv"
                                    class="sr-only"
                                    id="csv-file-upload"
                                    type="file"
                                  />
                                  <div
                                    class=""
                                  >
                                    <div
                                      aria-live="polite"
                                      class="invalid-feedback"
                                      id="validation-csv-file-upload"
                                    >
                                      <span />
                                    </div>
                                  </div>
                                  <small
                                    class="form-text"
                                    id="description-csv-file-upload"
                                  >
                                    The file must be a CSV containing a single column of email addresses.
                                  </small>
                                </div>
                                <div
                                  class="mt-4"
                                >
                                  <h3>
                                    Email Template
                                  </h3>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="email-template"
                                    >
                                      Customize Message
                                      <span
                                        class="required"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <textarea
                                      class="form-control"
                                      id="email-template"
                                      name="email-template"
                                      required=""
                                      style="height: 0px;"
                                    />
                                    <div
                                      aria-live="polite"
                                      class="invalid-feedback"
                                      id="validation-email-template"
                                    >
                                      <span />
                                    </div>
                                  </div>
                                </div>
                              </form>
                            </div>
                            <div
                              class="modal-footer"
                            >
                              <button
                                class="btn btn-primary"
                                type="button"
                              >
                                Assign Codes
                              </button>
                              <button
                                class="btn js-close-modal-on-click btn-secondary"
                                type="button"
                              >
                                Close
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                }
              >
                <div>
                  <div
                    className="fade"
                    role="presentation"
                  />
                  <div
                    className="modal js-close-modal-on-click fade"
                    onClick={[Function]}
                    role="presentation"
                  >
                    <div
                      aria-labelledby="id3"
                      aria-modal={true}
                      className=""
                      role="dialog"
                    >
                      <div
                        className="modal-content"
                      >
                        <div
                          className="modal-header"
                        >
                          <h2
                            className="modal-title"
                            id="id3"
                          >
                            <span
                              className="d-block"
                            >
                              My title
                            </span>
                            <small>
                              Code Assignment
                            </small>
                          </h2>
                          <t
                            aria-labelledby="paragonCloseModalButton2"
                            className={
                              Array [
                                "p-1",
                                "js-close-modal-on-click",
                              ]
                            }
                            inputRef={[Function]}
                            isClose={false}
                            label={
                              <u
                                className={
                                  Array [
                                    "fa",
                                    "fa-times",
                                    "js-close-modal-on-click",
                                  ]
                                }
                                hidden={true}
                                id="Icon1"
                              />
                            }
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              aria-labelledby="paragonCloseModalButton2"
                              className="btn p-1 js-close-modal-on-click"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              <u
                                className={
                                  Array [
                                    "fa",
                                    "fa-times",
                                    "js-close-modal-on-click",
                                  ]
                                }
                                hidden={true}
                                id="Icon1"
                              >
                                <span
                                  aria-hidden={true}
                                  className="fa fa-times js-close-modal-on-click"
                                  id="Icon1"
                                />
                              </u>
                            </button>
                          </t>
                        </div>
                        <div
                          className="modal-body"
                        >
                          <div
                            className="assignment-details mb-4"
                          >
                            <p>
                              <span
                                className="detail-label mr-1"
                              >
                                Unassigned Codes:
                              </span>
                              3
                            </p>
                          </div>
                          <form
                            onSubmit={[Function]}
                          >
                            <BulkAssignFields>
                              <H3
                                className={null}
                              >
                                <h3
                                  className={null}
                                >
                                  Add Users
                                </h3>
                              </H3>
                              <p
                                className="mb-3"
                              >
                                To add users, enter their email addresses below or upload a CSV file.
                              </p>
                              <Field
                                component={[Function]}
                                description="Enter one email address per line."
                                id="email-addresses"
                                label="Email Addresses"
                                name="email-addresses"
                                validate={[Function]}
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "unassignedCodes": 3,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "isBulkAssign": true,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  description="Enter one email address per line."
                                  id="email-addresses"
                                  label="Email Addresses"
                                  name="email-addresses"
                                  normalize={[Function]}
                                  validate={[Function]}
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "unassignedCodes": 3,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "isBulkAssign": true,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    description="Enter one email address per line."
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="email-addresses"
                                    label="Email Addresses"
                                    name="email-addresses"
                                    normalize={[Function]}
                                    pristine={true}
                                    validate={[Function]}
                                  >
                                    <TextAreaAutoSize
                                      description="Enter one email address per line."
                                      id="email-addresses"
                                      input={
                                        Object {
                                          "name": "email-addresses",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label="Email Addresses"
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": undefined,
                                          "invalid": false,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <label
                                          htmlFor="email-addresses"
                                        >
                                          Email Addresses
                                        </label>
                                        <TextareaAutosize
                                          className="form-control"
                                          id="email-addresses"
                                          inputRef={[Function]}
                                          maxRows={10}
                                          minRows={3}
                                          name="email-addresses"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          onHeightChange={[Function]}
                                          useCacheForDOMMeasurements={false}
                                          value=""
                                        >
                                          <textarea
                                            className="form-control"
                                            id="email-addresses"
                                            name="email-addresses"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onDragStart={[Function]}
                                            onDrop={[Function]}
                                            onFocus={[Function]}
                                            style={
                                              Object {
                                                "height": 0,
                                              }
                                            }
                                            value=""
                                          />
                                        </TextareaAutosize>
                                        <t
                                          className=""
                                          id="validation-email-addresses"
                                          invalidMessage=""
                                          isValid={true}
                                          variant={
                                            Object {
                                              "status": "DANGER",
                                            }
                                          }
                                          variantIconDescription=""
                                        >
                                          <div
                                            aria-live="polite"
                                            className="invalid-feedback"
                                            id="validation-email-addresses"
                                          >
                                            <span />
                                          </div>
                                        </t>
                                        <small
                                          className="form-text"
                                          id="description-email-addresses"
                                        >
                                          Enter one email address per line.
                                        </small>
                                      </div>
                                    </TextAreaAutoSize>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                              <Field
                                accept=".csv"
                                component={[Function]}
                                description="The file must be a CSV containing a single column of email addresses."
                                id="csv-file-upload"
                                label="Upload Email Addresses"
                                name="csv-file-upload"
                                onFileLoad={[Function]}
                                validate={
                                  Array [
                                    [Function],
                                  ]
                                }
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "unassignedCodes": 3,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "isBulkAssign": true,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  accept=".csv"
                                  component={[Function]}
                                  description="The file must be a CSV containing a single column of email addresses."
                                  id="csv-file-upload"
                                  label="Upload Email Addresses"
                                  name="csv-file-upload"
                                  normalize={[Function]}
                                  onFileLoad={[Function]}
                                  validate={
                                    Array [
                                      [Function],
                                    ]
                                  }
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "unassignedCodes": 3,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "isBulkAssign": true,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    accept=".csv"
                                    asyncValidating={false}
                                    component={[Function]}
                                    description="The file must be a CSV containing a single column of email addresses."
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="csv-file-upload"
                                    label="Upload Email Addresses"
                                    name="csv-file-upload"
                                    normalize={[Function]}
                                    onFileLoad={[Function]}
                                    pristine={true}
                                    validate={
                                      Array [
                                        [Function],
                                      ]
                                    }
                                  >
                                    <FileInput
                                      accept=".csv"
                                      description="The file must be a CSV containing a single column of email addresses."
                                      disabled={false}
                                      id="csv-file-upload"
                                      input={
                                        Object {
                                          "name": "csv-file-upload",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label="Upload Email Addresses"
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": undefined,
                                          "invalid": false,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      onFileLoad={[Function]}
                                      required={false}
                                    >
                                      <div
                                        className="file-input form-group"
                                      >
                                        <label
                                          className="d-block"
                                          htmlFor="csv-file-upload"
                                        >
                                          Upload Email Addresses
                                        </label>
                                        <label
                                          className="btn btn-outline-primary m-0"
                                          htmlFor="csv-file-upload"
                                        >
                                          <u
                                            className={
                                              Array [
                                                "fa",
                                                "fa-upload",
                                                "mr-2",
                                              ]
                                            }
                                            hidden={true}
                                            id="Icon1"
                                          >
                                            <span
                                              aria-hidden={true}
                                              className="fa fa-upload mr-2"
                                              id="Icon1"
                                            />
                                          </u>
                                          Choose a file
                                        </label>
                                        <input
                                          accept=".csv"
                                          className="sr-only"
                                          disabled={false}
                                          id="csv-file-upload"
                                          onChange={[Function]}
                                          required={false}
                                          type="file"
                                        />
                                        <div
                                          className=""
                                        >
                                          <t
                                            className=""
                                            id="validation-csv-file-upload"
                                            invalidMessage=""
                                            isValid={true}
                                            variant={
                                              Object {
                                                "status": "DANGER",
                                              }
                                            }
                                            variantIconDescription=""
                                          >
                                            <div
                                              aria-live="polite"
                                              className="invalid-feedback"
                                              id="validation-csv-file-upload"
                                            >
                                              <span />
                                            </div>
                                          </t>
                                        </div>
                                        <small
                                          className="form-text"
                                          id="description-csv-file-upload"
                                        >
                                          The file must be a CSV containing a single column of email addresses.
                                        </small>
                                      </div>
                                    </FileInput>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                            </BulkAssignFields>
                            <div
                              className="mt-4"
                            >
                              <H3
                                className={null}
                              >
                                <h3
                                  className={null}
                                >
                                  Email Template
                                </h3>
                              </H3>
                              <Field
                                component={[Function]}
                                id="email-template"
                                label={
                                  <React.Fragment>
                                    Customize Message
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </React.Fragment>
                                }
                                name="email-template"
                                required={true}
                                validate={
                                  Array [
                                    [Function],
                                  ]
                                }
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "unassignedCodes": 3,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "isBulkAssign": true,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="email-template"
                                  label={
                                    <React.Fragment>
                                      Customize Message
                                      <span
                                        className="required"
                                      >
                                        *
                                      </span>
                                    </React.Fragment>
                                  }
                                  name="email-template"
                                  normalize={[Function]}
                                  required={true}
                                  validate={
                                    Array [
                                      [Function],
                                    ]
                                  }
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "unassignedCodes": 3,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "isBulkAssign": true,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={true}
                                    dispatch={[Function]}
                                    id="email-template"
                                    initial="Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
"
                                    label={
                                      <React.Fragment>
                                        Customize Message
                                        <span
                                          className="required"
                                        >
                                          *
                                        </span>
                                      </React.Fragment>
                                    }
                                    name="email-template"
                                    normalize={[Function]}
                                    pristine={false}
                                    required={true}
                                    validate={
                                      Array [
                                        [Function],
                                      ]
                                    }
                                  >
                                    <TextAreaAutoSize
                                      id="email-template"
                                      input={
                                        Object {
                                          "name": "email-template",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label={
                                        <React.Fragment>
                                          Customize Message
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </React.Fragment>
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": true,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                          "invalid": false,
                                          "pristine": false,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      required={true}
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <label
                                          htmlFor="email-template"
                                        >
                                          Customize Message
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </label>
                                        <TextareaAutosize
                                          className="form-control"
                                          id="email-template"
                                          inputRef={[Function]}
                                          maxRows={10}
                                          minRows={3}
                                          name="email-template"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          onHeightChange={[Function]}
                                          required={true}
                                          useCacheForDOMMeasurements={false}
                                          value=""
                                        >
                                          <textarea
                                            className="form-control"
                                            id="email-template"
                                            name="email-template"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onDragStart={[Function]}
                                            onDrop={[Function]}
                                            onFocus={[Function]}
                                            required={true}
                                            style={
                                              Object {
                                                "height": 0,
                                              }
                                            }
                                            value=""
                                          />
                                        </TextareaAutosize>
                                        <t
                                          className=""
                                          id="validation-email-template"
                                          invalidMessage=""
                                          isValid={true}
                                          variant={
                                            Object {
                                              "status": "DANGER",
                                            }
                                          }
                                          variantIconDescription=""
                                        >
                                          <div
                                            aria-live="polite"
                                            className="invalid-feedback"
                                            id="validation-email-template"
                                          >
                                            <span />
                                          </div>
                                        </t>
                                      </div>
                                    </TextAreaAutoSize>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                            </div>
                          </form>
                        </div>
                        <div
                          className="modal-footer"
                        >
                          <t
                            buttonType="primary"
                            className={Array []}
                            disabled={false}
                            inputRef={[Function]}
                            isClose={false}
                            key="0"
                            label={
                              <React.Fragment>
                                Assign Codes
                              </React.Fragment>
                            }
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              Assign Codes
                            </button>
                          </t>
                          <t
                            buttonType="secondary"
                            className={
                              Array [
                                "js-close-modal-on-click",
                              ]
                            }
                            inputRef={[Function]}
                            isClose={false}
                            label="Close"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              className="btn js-close-modal-on-click btn-secondary"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              Close
                            </button>
                          </t>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Portal>
            </t>
          </CodeAssignmentModal>
        </Form(CodeAssignmentModal)>
      </Connect(Form(CodeAssignmentModal))>
    </ReduxForm>
  </Provider>
</CodeAssignmentModalWrapper>
`;

exports[`<CodeAssignmentModal /> renders correctly zzzzzzzzzwith isBulkAssign as false 1`] = `
<CodeAssignmentModalWrapper
  data={
    Object {
      "unassignedCodes": 3,
    }
  }
  isBulkAssign={false}
  onClose={[Function]}
  title="My title"
>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <ReduxForm
      data={
        Object {
          "unassignedCodes": 3,
        }
      }
      isBulkAssign={false}
      onClose={[Function]}
      title="My title"
    >
      <Connect(Form(CodeAssignmentModal))
        data={
          Object {
            "unassignedCodes": 3,
          }
        }
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="code-assignment-modal-form"
        getFormState={[Function]}
        initialValues={
          Object {
            "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
          }
        }
        isBulkAssign={false}
        keepDirtyOnReinitialize={false}
        onClose={[Function]}
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        title="My title"
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      >
        <Form(CodeAssignmentModal)
          anyTouched={false}
          array={
            Object {
              "insert": [Function],
              "move": [Function],
              "pop": [Function],
              "push": [Function],
              "remove": [Function],
              "removeAll": [Function],
              "shift": [Function],
              "splice": [Function],
              "swap": [Function],
              "unshift": [Function],
            }
          }
          arrayInsert={[Function]}
          arrayMove={[Function]}
          arrayPop={[Function]}
          arrayPush={[Function]}
          arrayRemove={[Function]}
          arrayRemoveAll={[Function]}
          arrayShift={[Function]}
          arraySplice={[Function]}
          arraySwap={[Function]}
          arrayUnshift={[Function]}
          asyncValidating={false}
          autofill={[Function]}
          blur={[Function]}
          change={[Function]}
          clearAsyncError={[Function]}
          clearFields={[Function]}
          clearSubmit={[Function]}
          clearSubmitErrors={[Function]}
          data={
            Object {
              "unassignedCodes": 3,
            }
          }
          destroy={[Function]}
          destroyOnUnmount={true}
          dirty={false}
          dispatch={[Function]}
          enableReinitialize={false}
          focus={[Function]}
          forceUnregisterOnUnmount={false}
          form="code-assignment-modal-form"
          getFormState={[Function]}
          initialValues={
            Object {
              "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
            }
          }
          initialize={[Function]}
          initialized={false}
          invalid={false}
          isBulkAssign={false}
          keepDirtyOnReinitialize={false}
          onClose={[Function]}
          persistentSubmitErrors={false}
          pristine={true}
          pure={true}
          registerField={[Function]}
          reset={[Function]}
          resetSection={[Function]}
          setSubmitFailed={[Function]}
          setSubmitSucceeded={[Function]}
          shouldAsyncValidate={[Function]}
          shouldError={[Function]}
          shouldValidate={[Function]}
          shouldWarn={[Function]}
          startAsyncValidation={[Function]}
          startSubmit={[Function]}
          stopAsyncValidation={[Function]}
          stopSubmit={[Function]}
          submit={[Function]}
          submitFailed={false}
          submitSucceeded={false}
          submitting={false}
          syncErrors={Object {}}
          syncWarnings={Object {}}
          title="My title"
          touch={[Function]}
          touchOnBlur={true}
          touchOnChange={false}
          unregisterField={[Function]}
          untouch={[Function]}
          updateSyncErrors={[Function]}
          updateSyncWarnings={[Function]}
          updateUnregisteredFields={false}
          valid={true}
          validExceptSubmit={true}
          values={
            Object {
              "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
            }
          }
        >
          <CodeAssignmentModal
            anyTouched={false}
            array={
              Object {
                "insert": [Function],
                "move": [Function],
                "pop": [Function],
                "push": [Function],
                "remove": [Function],
                "removeAll": [Function],
                "shift": [Function],
                "splice": [Function],
                "swap": [Function],
                "unshift": [Function],
              }
            }
            asyncValidate={[Function]}
            asyncValidating={false}
            autofill={[Function]}
            blur={[Function]}
            change={[Function]}
            clearAsyncError={[Function]}
            clearFields={[Function]}
            clearSubmit={[Function]}
            clearSubmitErrors={[Function]}
            data={
              Object {
                "unassignedCodes": 3,
              }
            }
            destroy={[Function]}
            dirty={false}
            dispatch={[Function]}
            error={null}
            form="code-assignment-modal-form"
            handleSubmit={[Function]}
            initialValues={
              Object {
                "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
              }
            }
            initialize={[Function]}
            initialized={false}
            invalid={false}
            isBulkAssign={false}
            isOpen={false}
            onClose={[Function]}
            pristine={true}
            pure={true}
            reset={[Function]}
            resetSection={[Function]}
            submit={[Function]}
            submitFailed={false}
            submitSucceeded={false}
            submitting={false}
            title="My title"
            touch={[Function]}
            untouch={[Function]}
            valid={true}
          >
            <t
              body={
                <React.Fragment>
                  <div
                    className="assignment-details mb-4"
                  />
                  <form
                    onSubmit={[Function]}
                  >
                    <IndividualAssignFields />
                    <div
                      className="mt-4"
                    >
                      <H3
                        className={null}
                      >
                        Email Template
                      </H3>
                      <Field
                        component={[Function]}
                        id="email-template"
                        label={
                          <React.Fragment>
                            Customize Message
                            <span
                              className="required"
                            >
                              *
                            </span>
                          </React.Fragment>
                        }
                        name="email-template"
                        required={true}
                        validate={
                          Array [
                            [Function],
                          ]
                        }
                      />
                    </div>
                  </form>
                </React.Fragment>
              }
              buttons={
                Array [
                  <t
                    buttonType="primary"
                    className={Array []}
                    disabled={false}
                    inputRef={[Function]}
                    isClose={false}
                    label={
                      <React.Fragment>
                        Assign Code
                      </React.Fragment>
                    }
                    onBlur={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    type="button"
                  />,
                ]
              }
              closeText="Close"
              onClose={[Function]}
              open={false}
              parentSelector="body"
              renderHeaderCloseButton={true}
              title={
                <React.Fragment>
                  <span
                    className="d-block"
                  >
                    My title
                  </span>
                  <small>
                    Code Assignment
                  </small>
                </React.Fragment>
              }
              variant={Object {}}
            >
              <Portal
                containerInfo={
                  <div>
                    <div>
                      <div
                        class="fade"
                        role="presentation"
                      />
                      <div
                        class="modal js-close-modal-on-click fade"
                        role="presentation"
                      >
                        <div
                          aria-labelledby="id4"
                          aria-modal="true"
                          class=""
                          role="dialog"
                        >
                          <div
                            class="modal-content"
                          >
                            <div
                              class="modal-header"
                            >
                              <h2
                                class="modal-title"
                                id="id4"
                              >
                                <span
                                  class="d-block"
                                >
                                  My title
                                </span>
                                <small>
                                  Code Assignment
                                </small>
                              </h2>
                              <button
                                aria-labelledby="paragonCloseModalButton2"
                                class="btn p-1 js-close-modal-on-click"
                                type="button"
                              >
                                <span
                                  aria-hidden="true"
                                  class="fa fa-times js-close-modal-on-click"
                                  id="Icon1"
                                />
                              </button>
                            </div>
                            <div
                              class="modal-body"
                            >
                              <div
                                class="assignment-details mb-4"
                              />
                              <form>
                                <h3>
                                  Add User
                                </h3>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    class=""
                                    for="asInput5"
                                    id="label-asInput5"
                                  >
                                    Email Address
                                    <span
                                      class="required"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    aria-describedby="error-asInput5"
                                    aria-invalid="false"
                                    autocomplete="on"
                                    class="form-control"
                                    id="asInput5"
                                    name="email-address"
                                    required=""
                                    themes="danger"
                                    type="email"
                                    value=""
                                  />
                                  <div
                                    aria-live="polite"
                                    class="invalid-feedback"
                                    id="error-asInput5"
                                  >
                                    <span />
                                  </div>
                                </div>
                                <div
                                  class="mt-4"
                                >
                                  <h3>
                                    Email Template
                                  </h3>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="email-template"
                                    >
                                      Customize Message
                                      <span
                                        class="required"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <textarea
                                      class="form-control"
                                      id="email-template"
                                      name="email-template"
                                      required=""
                                      style="height: 0px;"
                                    />
                                    <div
                                      aria-live="polite"
                                      class="invalid-feedback"
                                      id="validation-email-template"
                                    >
                                      <span />
                                    </div>
                                  </div>
                                </div>
                              </form>
                            </div>
                            <div
                              class="modal-footer"
                            >
                              <button
                                class="btn btn-primary"
                                type="button"
                              >
                                Assign Code
                              </button>
                              <button
                                class="btn js-close-modal-on-click btn-secondary"
                                type="button"
                              >
                                Close
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                }
              >
                <div>
                  <div
                    className="fade"
                    role="presentation"
                  />
                  <div
                    className="modal js-close-modal-on-click fade"
                    onClick={[Function]}
                    role="presentation"
                  >
                    <div
                      aria-labelledby="id4"
                      aria-modal={true}
                      className=""
                      role="dialog"
                    >
                      <div
                        className="modal-content"
                      >
                        <div
                          className="modal-header"
                        >
                          <h2
                            className="modal-title"
                            id="id4"
                          >
                            <span
                              className="d-block"
                            >
                              My title
                            </span>
                            <small>
                              Code Assignment
                            </small>
                          </h2>
                          <t
                            aria-labelledby="paragonCloseModalButton2"
                            className={
                              Array [
                                "p-1",
                                "js-close-modal-on-click",
                              ]
                            }
                            inputRef={[Function]}
                            isClose={false}
                            label={
                              <u
                                className={
                                  Array [
                                    "fa",
                                    "fa-times",
                                    "js-close-modal-on-click",
                                  ]
                                }
                                hidden={true}
                                id="Icon1"
                              />
                            }
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              aria-labelledby="paragonCloseModalButton2"
                              className="btn p-1 js-close-modal-on-click"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              <u
                                className={
                                  Array [
                                    "fa",
                                    "fa-times",
                                    "js-close-modal-on-click",
                                  ]
                                }
                                hidden={true}
                                id="Icon1"
                              >
                                <span
                                  aria-hidden={true}
                                  className="fa fa-times js-close-modal-on-click"
                                  id="Icon1"
                                />
                              </u>
                            </button>
                          </t>
                        </div>
                        <div
                          className="modal-body"
                        >
                          <div
                            className="assignment-details mb-4"
                          />
                          <form
                            onSubmit={[Function]}
                          >
                            <IndividualAssignFields>
                              <h3>
                                Add User
                              </h3>
                              <Field
                                component={[Function]}
                                label={
                                  <React.Fragment>
                                    Email Address
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </React.Fragment>
                                }
                                name="email-address"
                                required={true}
                                type="email"
                                validate={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "unassignedCodes": 3,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "isBulkAssign": false,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  label={
                                    <React.Fragment>
                                      Email Address
                                      <span
                                        className="required"
                                      >
                                        *
                                      </span>
                                    </React.Fragment>
                                  }
                                  name="email-address"
                                  normalize={[Function]}
                                  required={true}
                                  type="email"
                                  validate={
                                    Array [
                                      [Function],
                                      [Function],
                                    ]
                                  }
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "unassignedCodes": 3,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "isBulkAssign": false,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={false}
                                    dispatch={[Function]}
                                    label={
                                      <React.Fragment>
                                        Email Address
                                        <span
                                          className="required"
                                        >
                                          *
                                        </span>
                                      </React.Fragment>
                                    }
                                    name="email-address"
                                    normalize={[Function]}
                                    pristine={true}
                                    required={true}
                                    type="email"
                                    validate={
                                      Array [
                                        [Function],
                                        [Function],
                                      ]
                                    }
                                  >
                                    <RenderField
                                      disabled={false}
                                      input={
                                        Object {
                                          "name": "email-address",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label={
                                        <React.Fragment>
                                          Email Address
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </React.Fragment>
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": undefined,
                                          "invalid": false,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      required={true}
                                      type="email"
                                    >
                                      <asInput(f)
                                        className={Array []}
                                        dangerIconDescription=""
                                        disabled={false}
                                        inline={false}
                                        isValid={true}
                                        label={
                                          <React.Fragment>
                                            Email Address
                                            <span
                                              className="required"
                                            >
                                              *
                                            </span>
                                          </React.Fragment>
                                        }
                                        name="email-address"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onDragStart={[Function]}
                                        onDrop={[Function]}
                                        onFocus={[Function]}
                                        onKeyPress={[Function]}
                                        required={true}
                                        themes={
                                          Array [
                                            "danger",
                                          ]
                                        }
                                        type="email"
                                        validationMessage=""
                                        value=""
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <label
                                            className=""
                                            htmlFor="asInput5"
                                            id="label-asInput5"
                                          >
                                            Email Address
                                            <span
                                              className="required"
                                            >
                                              *
                                            </span>
                                          </label>
                                          <f
                                            autoComplete="on"
                                            className={
                                              Array [
                                                "form-control",
                                              ]
                                            }
                                            dangerIconDescription=""
                                            describedBy="error-asInput5"
                                            descriptionId="description-asInput5"
                                            disabled={false}
                                            errorId="error-asInput5"
                                            id="asInput5"
                                            inline={false}
                                            inputRef={[Function]}
                                            isValid={true}
                                            label={
                                              <React.Fragment>
                                                Email Address
                                                <span
                                                  className="required"
                                                >
                                                  *
                                                </span>
                                              </React.Fragment>
                                            }
                                            name="email-address"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onDragStart={[Function]}
                                            onDrop={[Function]}
                                            onFocus={[Function]}
                                            onKeyPress={[Function]}
                                            readOnly={false}
                                            required={true}
                                            themes={
                                              Array [
                                                "danger",
                                              ]
                                            }
                                            type="email"
                                            validationMessage=""
                                            value=""
                                          >
                                            <input
                                              aria-describedby="error-asInput5"
                                              aria-invalid={false}
                                              autoComplete="on"
                                              className="form-control"
                                              disabled={false}
                                              id="asInput5"
                                              name="email-address"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyPress={[Function]}
                                              readOnly={false}
                                              required={true}
                                              themes={
                                                Array [
                                                  "danger",
                                                ]
                                              }
                                              type="email"
                                              value=""
                                            />
                                          </f>
                                          <t
                                            className=""
                                            id="error-asInput5"
                                            invalidMessage=""
                                            isValid={true}
                                            variant={
                                              Object {
                                                "status": "DANGER",
                                              }
                                            }
                                            variantIconDescription=""
                                          >
                                            <div
                                              aria-live="polite"
                                              className="invalid-feedback"
                                              id="error-asInput5"
                                            >
                                              <span />
                                            </div>
                                          </t>
                                        </div>
                                      </asInput(f)>
                                    </RenderField>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                            </IndividualAssignFields>
                            <div
                              className="mt-4"
                            >
                              <H3
                                className={null}
                              >
                                <h3
                                  className={null}
                                >
                                  Email Template
                                </h3>
                              </H3>
                              <Field
                                component={[Function]}
                                id="email-template"
                                label={
                                  <React.Fragment>
                                    Customize Message
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </React.Fragment>
                                }
                                name="email-template"
                                required={true}
                                validate={
                                  Array [
                                    [Function],
                                  ]
                                }
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "unassignedCodes": 3,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "isBulkAssign": false,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="email-template"
                                  label={
                                    <React.Fragment>
                                      Customize Message
                                      <span
                                        className="required"
                                      >
                                        *
                                      </span>
                                    </React.Fragment>
                                  }
                                  name="email-template"
                                  normalize={[Function]}
                                  required={true}
                                  validate={
                                    Array [
                                      [Function],
                                    ]
                                  }
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "unassignedCodes": 3,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "isBulkAssign": false,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={true}
                                    dispatch={[Function]}
                                    id="email-template"
                                    initial="Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
"
                                    label={
                                      <React.Fragment>
                                        Customize Message
                                        <span
                                          className="required"
                                        >
                                          *
                                        </span>
                                      </React.Fragment>
                                    }
                                    name="email-template"
                                    normalize={[Function]}
                                    pristine={false}
                                    required={true}
                                    validate={
                                      Array [
                                        [Function],
                                      ]
                                    }
                                  >
                                    <TextAreaAutoSize
                                      id="email-template"
                                      input={
                                        Object {
                                          "name": "email-template",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label={
                                        <React.Fragment>
                                          Customize Message
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </React.Fragment>
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": true,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                          "invalid": false,
                                          "pristine": false,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      required={true}
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <label
                                          htmlFor="email-template"
                                        >
                                          Customize Message
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </label>
                                        <TextareaAutosize
                                          className="form-control"
                                          id="email-template"
                                          inputRef={[Function]}
                                          maxRows={10}
                                          minRows={3}
                                          name="email-template"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          onHeightChange={[Function]}
                                          required={true}
                                          useCacheForDOMMeasurements={false}
                                          value=""
                                        >
                                          <textarea
                                            className="form-control"
                                            id="email-template"
                                            name="email-template"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onDragStart={[Function]}
                                            onDrop={[Function]}
                                            onFocus={[Function]}
                                            required={true}
                                            style={
                                              Object {
                                                "height": 0,
                                              }
                                            }
                                            value=""
                                          />
                                        </TextareaAutosize>
                                        <t
                                          className=""
                                          id="validation-email-template"
                                          invalidMessage=""
                                          isValid={true}
                                          variant={
                                            Object {
                                              "status": "DANGER",
                                            }
                                          }
                                          variantIconDescription=""
                                        >
                                          <div
                                            aria-live="polite"
                                            className="invalid-feedback"
                                            id="validation-email-template"
                                          >
                                            <span />
                                          </div>
                                        </t>
                                      </div>
                                    </TextAreaAutoSize>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                            </div>
                          </form>
                        </div>
                        <div
                          className="modal-footer"
                        >
                          <t
                            buttonType="primary"
                            className={Array []}
                            disabled={false}
                            inputRef={[Function]}
                            isClose={false}
                            key="0"
                            label={
                              <React.Fragment>
                                Assign Code
                              </React.Fragment>
                            }
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              Assign Code
                            </button>
                          </t>
                          <t
                            buttonType="secondary"
                            className={
                              Array [
                                "js-close-modal-on-click",
                              ]
                            }
                            inputRef={[Function]}
                            isClose={false}
                            label="Close"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              className="btn js-close-modal-on-click btn-secondary"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              Close
                            </button>
                          </t>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Portal>
            </t>
          </CodeAssignmentModal>
        </Form(CodeAssignmentModal)>
      </Connect(Form(CodeAssignmentModal))>
    </ReduxForm>
  </Provider>
</CodeAssignmentModalWrapper>
`;

exports[`<CodeAssignmentModal /> renders correctly zzzzzzzzzwith isBulkAssign as true 1`] = `
<CodeAssignmentModalWrapper
  data={
    Object {
      "unassignedCodes": 3,
    }
  }
  isBulkAssign={true}
  onClose={[Function]}
  title="My title"
>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <ReduxForm
      data={
        Object {
          "unassignedCodes": 3,
        }
      }
      isBulkAssign={true}
      onClose={[Function]}
      title="My title"
    >
      <Connect(Form(CodeAssignmentModal))
        data={
          Object {
            "unassignedCodes": 3,
          }
        }
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="code-assignment-modal-form"
        getFormState={[Function]}
        initialValues={
          Object {
            "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
          }
        }
        isBulkAssign={true}
        keepDirtyOnReinitialize={false}
        onClose={[Function]}
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        title="My title"
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      >
        <Form(CodeAssignmentModal)
          anyTouched={false}
          array={
            Object {
              "insert": [Function],
              "move": [Function],
              "pop": [Function],
              "push": [Function],
              "remove": [Function],
              "removeAll": [Function],
              "shift": [Function],
              "splice": [Function],
              "swap": [Function],
              "unshift": [Function],
            }
          }
          arrayInsert={[Function]}
          arrayMove={[Function]}
          arrayPop={[Function]}
          arrayPush={[Function]}
          arrayRemove={[Function]}
          arrayRemoveAll={[Function]}
          arrayShift={[Function]}
          arraySplice={[Function]}
          arraySwap={[Function]}
          arrayUnshift={[Function]}
          asyncValidating={false}
          autofill={[Function]}
          blur={[Function]}
          change={[Function]}
          clearAsyncError={[Function]}
          clearFields={[Function]}
          clearSubmit={[Function]}
          clearSubmitErrors={[Function]}
          data={
            Object {
              "unassignedCodes": 3,
            }
          }
          destroy={[Function]}
          destroyOnUnmount={true}
          dirty={false}
          dispatch={[Function]}
          enableReinitialize={false}
          focus={[Function]}
          forceUnregisterOnUnmount={false}
          form="code-assignment-modal-form"
          getFormState={[Function]}
          initialValues={
            Object {
              "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
            }
          }
          initialize={[Function]}
          initialized={false}
          invalid={false}
          isBulkAssign={true}
          keepDirtyOnReinitialize={false}
          onClose={[Function]}
          persistentSubmitErrors={false}
          pristine={true}
          pure={true}
          registerField={[Function]}
          reset={[Function]}
          resetSection={[Function]}
          setSubmitFailed={[Function]}
          setSubmitSucceeded={[Function]}
          shouldAsyncValidate={[Function]}
          shouldError={[Function]}
          shouldValidate={[Function]}
          shouldWarn={[Function]}
          startAsyncValidation={[Function]}
          startSubmit={[Function]}
          stopAsyncValidation={[Function]}
          stopSubmit={[Function]}
          submit={[Function]}
          submitFailed={false}
          submitSucceeded={false}
          submitting={false}
          syncErrors={Object {}}
          syncWarnings={Object {}}
          title="My title"
          touch={[Function]}
          touchOnBlur={true}
          touchOnChange={false}
          unregisterField={[Function]}
          untouch={[Function]}
          updateSyncErrors={[Function]}
          updateSyncWarnings={[Function]}
          updateUnregisteredFields={false}
          valid={true}
          validExceptSubmit={true}
          values={
            Object {
              "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
            }
          }
        >
          <CodeAssignmentModal
            anyTouched={false}
            array={
              Object {
                "insert": [Function],
                "move": [Function],
                "pop": [Function],
                "push": [Function],
                "remove": [Function],
                "removeAll": [Function],
                "shift": [Function],
                "splice": [Function],
                "swap": [Function],
                "unshift": [Function],
              }
            }
            asyncValidate={[Function]}
            asyncValidating={false}
            autofill={[Function]}
            blur={[Function]}
            change={[Function]}
            clearAsyncError={[Function]}
            clearFields={[Function]}
            clearSubmit={[Function]}
            clearSubmitErrors={[Function]}
            data={
              Object {
                "unassignedCodes": 3,
              }
            }
            destroy={[Function]}
            dirty={false}
            dispatch={[Function]}
            error={null}
            form="code-assignment-modal-form"
            handleSubmit={[Function]}
            initialValues={
              Object {
                "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
              }
            }
            initialize={[Function]}
            initialized={false}
            invalid={false}
            isBulkAssign={true}
            isOpen={false}
            onClose={[Function]}
            pristine={true}
            pure={true}
            reset={[Function]}
            resetSection={[Function]}
            submit={[Function]}
            submitFailed={false}
            submitSucceeded={false}
            submitting={false}
            title="My title"
            touch={[Function]}
            untouch={[Function]}
            valid={true}
          >
            <t
              body={
                <React.Fragment>
                  <div
                    className="assignment-details mb-4"
                  >
                    <p>
                      <span
                        className="detail-label mr-1"
                      >
                        Unassigned Codes:
                      </span>
                      3
                    </p>
                  </div>
                  <form
                    onSubmit={[Function]}
                  >
                    <BulkAssignFields />
                    <div
                      className="mt-4"
                    >
                      <H3
                        className={null}
                      >
                        Email Template
                      </H3>
                      <Field
                        component={[Function]}
                        id="email-template"
                        label={
                          <React.Fragment>
                            Customize Message
                            <span
                              className="required"
                            >
                              *
                            </span>
                          </React.Fragment>
                        }
                        name="email-template"
                        required={true}
                        validate={
                          Array [
                            [Function],
                          ]
                        }
                      />
                    </div>
                  </form>
                </React.Fragment>
              }
              buttons={
                Array [
                  <t
                    buttonType="primary"
                    className={Array []}
                    disabled={false}
                    inputRef={[Function]}
                    isClose={false}
                    label={
                      <React.Fragment>
                        Assign Codes
                      </React.Fragment>
                    }
                    onBlur={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    type="button"
                  />,
                ]
              }
              closeText="Close"
              onClose={[Function]}
              open={false}
              parentSelector="body"
              renderHeaderCloseButton={true}
              title={
                <React.Fragment>
                  <span
                    className="d-block"
                  >
                    My title
                  </span>
                  <small>
                    Code Assignment
                  </small>
                </React.Fragment>
              }
              variant={Object {}}
            >
              <Portal
                containerInfo={
                  <div>
                    <div>
                      <div
                        class="fade"
                        role="presentation"
                      />
                      <div
                        class="modal js-close-modal-on-click fade"
                        role="presentation"
                      >
                        <div
                          aria-labelledby="id3"
                          aria-modal="true"
                          class=""
                          role="dialog"
                        >
                          <div
                            class="modal-content"
                          >
                            <div
                              class="modal-header"
                            >
                              <h2
                                class="modal-title"
                                id="id3"
                              >
                                <span
                                  class="d-block"
                                >
                                  My title
                                </span>
                                <small>
                                  Code Assignment
                                </small>
                              </h2>
                              <button
                                aria-labelledby="paragonCloseModalButton2"
                                class="btn p-1 js-close-modal-on-click"
                                type="button"
                              >
                                <span
                                  aria-hidden="true"
                                  class="fa fa-times js-close-modal-on-click"
                                  id="Icon1"
                                />
                              </button>
                            </div>
                            <div
                              class="modal-body"
                            >
                              <div
                                class="assignment-details mb-4"
                              >
                                <p>
                                  <span
                                    class="detail-label mr-1"
                                  >
                                    Unassigned Codes:
                                  </span>
                                  3
                                </p>
                              </div>
                              <form>
                                <h3>
                                  Add Users
                                </h3>
                                <p
                                  class="mb-3"
                                >
                                  To add users, enter their email addresses below or upload a CSV file.
                                </p>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="email-addresses"
                                  >
                                    Email Addresses
                                  </label>
                                  <textarea
                                    class="form-control"
                                    id="email-addresses"
                                    name="email-addresses"
                                    style="height: 0px;"
                                  />
                                  <div
                                    aria-live="polite"
                                    class="invalid-feedback"
                                    id="validation-email-addresses"
                                  >
                                    <span />
                                  </div>
                                  <small
                                    class="form-text"
                                    id="description-email-addresses"
                                  >
                                    Enter one email address per line.
                                  </small>
                                </div>
                                <div
                                  class="file-input form-group"
                                >
                                  <label
                                    class="d-block"
                                    for="csv-file-upload"
                                  >
                                    Upload Email Addresses
                                  </label>
                                  <label
                                    class="btn btn-outline-primary m-0"
                                    for="csv-file-upload"
                                  >
                                    <span
                                      aria-hidden="true"
                                      class="fa fa-upload mr-2"
                                      id="Icon1"
                                    />
                                    Choose a file
                                  </label>
                                  <input
                                    accept=".csv"
                                    class="sr-only"
                                    id="csv-file-upload"
                                    type="file"
                                  />
                                  <div
                                    class=""
                                  >
                                    <div
                                      aria-live="polite"
                                      class="invalid-feedback"
                                      id="validation-csv-file-upload"
                                    >
                                      <span />
                                    </div>
                                  </div>
                                  <small
                                    class="form-text"
                                    id="description-csv-file-upload"
                                  >
                                    The file must be a CSV containing a single column of email addresses.
                                  </small>
                                </div>
                                <div
                                  class="mt-4"
                                >
                                  <h3>
                                    Email Template
                                  </h3>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="email-template"
                                    >
                                      Customize Message
                                      <span
                                        class="required"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <textarea
                                      class="form-control"
                                      id="email-template"
                                      name="email-template"
                                      required=""
                                      style="height: 0px;"
                                    />
                                    <div
                                      aria-live="polite"
                                      class="invalid-feedback"
                                      id="validation-email-template"
                                    >
                                      <span />
                                    </div>
                                  </div>
                                </div>
                              </form>
                            </div>
                            <div
                              class="modal-footer"
                            >
                              <button
                                class="btn btn-primary"
                                type="button"
                              >
                                Assign Codes
                              </button>
                              <button
                                class="btn js-close-modal-on-click btn-secondary"
                                type="button"
                              >
                                Close
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                }
              >
                <div>
                  <div
                    className="fade"
                    role="presentation"
                  />
                  <div
                    className="modal js-close-modal-on-click fade"
                    onClick={[Function]}
                    role="presentation"
                  >
                    <div
                      aria-labelledby="id3"
                      aria-modal={true}
                      className=""
                      role="dialog"
                    >
                      <div
                        className="modal-content"
                      >
                        <div
                          className="modal-header"
                        >
                          <h2
                            className="modal-title"
                            id="id3"
                          >
                            <span
                              className="d-block"
                            >
                              My title
                            </span>
                            <small>
                              Code Assignment
                            </small>
                          </h2>
                          <t
                            aria-labelledby="paragonCloseModalButton2"
                            className={
                              Array [
                                "p-1",
                                "js-close-modal-on-click",
                              ]
                            }
                            inputRef={[Function]}
                            isClose={false}
                            label={
                              <u
                                className={
                                  Array [
                                    "fa",
                                    "fa-times",
                                    "js-close-modal-on-click",
                                  ]
                                }
                                hidden={true}
                                id="Icon1"
                              />
                            }
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              aria-labelledby="paragonCloseModalButton2"
                              className="btn p-1 js-close-modal-on-click"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              <u
                                className={
                                  Array [
                                    "fa",
                                    "fa-times",
                                    "js-close-modal-on-click",
                                  ]
                                }
                                hidden={true}
                                id="Icon1"
                              >
                                <span
                                  aria-hidden={true}
                                  className="fa fa-times js-close-modal-on-click"
                                  id="Icon1"
                                />
                              </u>
                            </button>
                          </t>
                        </div>
                        <div
                          className="modal-body"
                        >
                          <div
                            className="assignment-details mb-4"
                          >
                            <p>
                              <span
                                className="detail-label mr-1"
                              >
                                Unassigned Codes:
                              </span>
                              3
                            </p>
                          </div>
                          <form
                            onSubmit={[Function]}
                          >
                            <BulkAssignFields>
                              <H3
                                className={null}
                              >
                                <h3
                                  className={null}
                                >
                                  Add Users
                                </h3>
                              </H3>
                              <p
                                className="mb-3"
                              >
                                To add users, enter their email addresses below or upload a CSV file.
                              </p>
                              <Field
                                component={[Function]}
                                description="Enter one email address per line."
                                id="email-addresses"
                                label="Email Addresses"
                                name="email-addresses"
                                validate={[Function]}
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "unassignedCodes": 3,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "isBulkAssign": true,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  description="Enter one email address per line."
                                  id="email-addresses"
                                  label="Email Addresses"
                                  name="email-addresses"
                                  normalize={[Function]}
                                  validate={[Function]}
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "unassignedCodes": 3,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "isBulkAssign": true,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    description="Enter one email address per line."
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="email-addresses"
                                    label="Email Addresses"
                                    name="email-addresses"
                                    normalize={[Function]}
                                    pristine={true}
                                    validate={[Function]}
                                  >
                                    <TextAreaAutoSize
                                      description="Enter one email address per line."
                                      id="email-addresses"
                                      input={
                                        Object {
                                          "name": "email-addresses",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label="Email Addresses"
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": undefined,
                                          "invalid": false,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <label
                                          htmlFor="email-addresses"
                                        >
                                          Email Addresses
                                        </label>
                                        <TextareaAutosize
                                          className="form-control"
                                          id="email-addresses"
                                          inputRef={[Function]}
                                          maxRows={10}
                                          minRows={3}
                                          name="email-addresses"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          onHeightChange={[Function]}
                                          useCacheForDOMMeasurements={false}
                                          value=""
                                        >
                                          <textarea
                                            className="form-control"
                                            id="email-addresses"
                                            name="email-addresses"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onDragStart={[Function]}
                                            onDrop={[Function]}
                                            onFocus={[Function]}
                                            style={
                                              Object {
                                                "height": 0,
                                              }
                                            }
                                            value=""
                                          />
                                        </TextareaAutosize>
                                        <t
                                          className=""
                                          id="validation-email-addresses"
                                          invalidMessage=""
                                          isValid={true}
                                          variant={
                                            Object {
                                              "status": "DANGER",
                                            }
                                          }
                                          variantIconDescription=""
                                        >
                                          <div
                                            aria-live="polite"
                                            className="invalid-feedback"
                                            id="validation-email-addresses"
                                          >
                                            <span />
                                          </div>
                                        </t>
                                        <small
                                          className="form-text"
                                          id="description-email-addresses"
                                        >
                                          Enter one email address per line.
                                        </small>
                                      </div>
                                    </TextAreaAutoSize>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                              <Field
                                accept=".csv"
                                component={[Function]}
                                description="The file must be a CSV containing a single column of email addresses."
                                id="csv-file-upload"
                                label="Upload Email Addresses"
                                name="csv-file-upload"
                                onFileLoad={[Function]}
                                validate={
                                  Array [
                                    [Function],
                                  ]
                                }
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "unassignedCodes": 3,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "isBulkAssign": true,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  accept=".csv"
                                  component={[Function]}
                                  description="The file must be a CSV containing a single column of email addresses."
                                  id="csv-file-upload"
                                  label="Upload Email Addresses"
                                  name="csv-file-upload"
                                  normalize={[Function]}
                                  onFileLoad={[Function]}
                                  validate={
                                    Array [
                                      [Function],
                                    ]
                                  }
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "unassignedCodes": 3,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "isBulkAssign": true,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    accept=".csv"
                                    asyncValidating={false}
                                    component={[Function]}
                                    description="The file must be a CSV containing a single column of email addresses."
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="csv-file-upload"
                                    label="Upload Email Addresses"
                                    name="csv-file-upload"
                                    normalize={[Function]}
                                    onFileLoad={[Function]}
                                    pristine={true}
                                    validate={
                                      Array [
                                        [Function],
                                      ]
                                    }
                                  >
                                    <FileInput
                                      accept=".csv"
                                      description="The file must be a CSV containing a single column of email addresses."
                                      disabled={false}
                                      id="csv-file-upload"
                                      input={
                                        Object {
                                          "name": "csv-file-upload",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label="Upload Email Addresses"
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": undefined,
                                          "invalid": false,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      onFileLoad={[Function]}
                                      required={false}
                                    >
                                      <div
                                        className="file-input form-group"
                                      >
                                        <label
                                          className="d-block"
                                          htmlFor="csv-file-upload"
                                        >
                                          Upload Email Addresses
                                        </label>
                                        <label
                                          className="btn btn-outline-primary m-0"
                                          htmlFor="csv-file-upload"
                                        >
                                          <u
                                            className={
                                              Array [
                                                "fa",
                                                "fa-upload",
                                                "mr-2",
                                              ]
                                            }
                                            hidden={true}
                                            id="Icon1"
                                          >
                                            <span
                                              aria-hidden={true}
                                              className="fa fa-upload mr-2"
                                              id="Icon1"
                                            />
                                          </u>
                                          Choose a file
                                        </label>
                                        <input
                                          accept=".csv"
                                          className="sr-only"
                                          disabled={false}
                                          id="csv-file-upload"
                                          onChange={[Function]}
                                          required={false}
                                          type="file"
                                        />
                                        <div
                                          className=""
                                        >
                                          <t
                                            className=""
                                            id="validation-csv-file-upload"
                                            invalidMessage=""
                                            isValid={true}
                                            variant={
                                              Object {
                                                "status": "DANGER",
                                              }
                                            }
                                            variantIconDescription=""
                                          >
                                            <div
                                              aria-live="polite"
                                              className="invalid-feedback"
                                              id="validation-csv-file-upload"
                                            >
                                              <span />
                                            </div>
                                          </t>
                                        </div>
                                        <small
                                          className="form-text"
                                          id="description-csv-file-upload"
                                        >
                                          The file must be a CSV containing a single column of email addresses.
                                        </small>
                                      </div>
                                    </FileInput>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                            </BulkAssignFields>
                            <div
                              className="mt-4"
                            >
                              <H3
                                className={null}
                              >
                                <h3
                                  className={null}
                                >
                                  Email Template
                                </h3>
                              </H3>
                              <Field
                                component={[Function]}
                                id="email-template"
                                label={
                                  <React.Fragment>
                                    Customize Message
                                    <span
                                      className="required"
                                    >
                                      *
                                    </span>
                                  </React.Fragment>
                                }
                                name="email-template"
                                required={true}
                                validate={
                                  Array [
                                    [Function],
                                  ]
                                }
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearFields": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "data": Object {
                                        "unassignedCodes": 3,
                                      },
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "code-assignment-modal-form",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "initialValues": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "isBulkAssign": true,
                                      "keepDirtyOnReinitialize": false,
                                      "onClose": [Function],
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "resetSection": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldError": [Function],
                                      "shouldValidate": [Function],
                                      "shouldWarn": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "title": "My title",
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "updateUnregisteredFields": false,
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {
                                        "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                      },
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="email-template"
                                  label={
                                    <React.Fragment>
                                      Customize Message
                                      <span
                                        className="required"
                                      >
                                        *
                                      </span>
                                    </React.Fragment>
                                  }
                                  name="email-template"
                                  normalize={[Function]}
                                  required={true}
                                  validate={
                                    Array [
                                      [Function],
                                    ]
                                  }
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearFields": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "data": Object {
                                          "unassignedCodes": 3,
                                        },
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "code-assignment-modal-form",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "initialValues": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "isBulkAssign": true,
                                        "keepDirtyOnReinitialize": false,
                                        "onClose": [Function],
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "resetSection": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldError": [Function],
                                        "shouldValidate": [Function],
                                        "shouldWarn": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "title": "My title",
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "updateUnregisteredFields": false,
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {
                                          "email-template": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                        },
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={true}
                                    dispatch={[Function]}
                                    id="email-template"
                                    initial="Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
"
                                    label={
                                      <React.Fragment>
                                        Customize Message
                                        <span
                                          className="required"
                                        >
                                          *
                                        </span>
                                      </React.Fragment>
                                    }
                                    name="email-template"
                                    normalize={[Function]}
                                    pristine={false}
                                    required={true}
                                    validate={
                                      Array [
                                        [Function],
                                      ]
                                    }
                                  >
                                    <TextAreaAutoSize
                                      id="email-template"
                                      input={
                                        Object {
                                          "name": "email-template",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      label={
                                        <React.Fragment>
                                          Customize Message
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </React.Fragment>
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": true,
                                          "dispatch": [Function],
                                          "error": undefined,
                                          "form": "code-assignment-modal-form",
                                          "initial": "Your learning manager has provided you with a new access code to take a course at edX. You may redeem this code for {{REDEMPTIONS_REMAINING}} # of courses.

edX Login: {{USER_EMAIL}}
Enrollment URL: {{ENROLLMENT_URL}}
Access Code: {{CODE}}
Expiration Date: {{EXPIRATION_DATE}}

You may go directly to the Enrollment URL to view courses that are available for this code or you can insert the access code at checkout under “coupon code” for applicable courses.

For any questions, please reach out to your Learning Manager.
",
                                          "invalid": false,
                                          "pristine": false,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": true,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      required={true}
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <label
                                          htmlFor="email-template"
                                        >
                                          Customize Message
                                          <span
                                            className="required"
                                          >
                                            *
                                          </span>
                                        </label>
                                        <TextareaAutosize
                                          className="form-control"
                                          id="email-template"
                                          inputRef={[Function]}
                                          maxRows={10}
                                          minRows={3}
                                          name="email-template"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          onHeightChange={[Function]}
                                          required={true}
                                          useCacheForDOMMeasurements={false}
                                          value=""
                                        >
                                          <textarea
                                            className="form-control"
                                            id="email-template"
                                            name="email-template"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onDragStart={[Function]}
                                            onDrop={[Function]}
                                            onFocus={[Function]}
                                            required={true}
                                            style={
                                              Object {
                                                "height": 0,
                                              }
                                            }
                                            value=""
                                          />
                                        </TextareaAutosize>
                                        <t
                                          className=""
                                          id="validation-email-template"
                                          invalidMessage=""
                                          isValid={true}
                                          variant={
                                            Object {
                                              "status": "DANGER",
                                            }
                                          }
                                          variantIconDescription=""
                                        >
                                          <div
                                            aria-live="polite"
                                            className="invalid-feedback"
                                            id="validation-email-template"
                                          >
                                            <span />
                                          </div>
                                        </t>
                                      </div>
                                    </TextAreaAutoSize>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                            </div>
                          </form>
                        </div>
                        <div
                          className="modal-footer"
                        >
                          <t
                            buttonType="primary"
                            className={Array []}
                            disabled={false}
                            inputRef={[Function]}
                            isClose={false}
                            key="0"
                            label={
                              <React.Fragment>
                                Assign Codes
                              </React.Fragment>
                            }
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              Assign Codes
                            </button>
                          </t>
                          <t
                            buttonType="secondary"
                            className={
                              Array [
                                "js-close-modal-on-click",
                              ]
                            }
                            inputRef={[Function]}
                            isClose={false}
                            label="Close"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            type="button"
                          >
                            <button
                              className="btn js-close-modal-on-click btn-secondary"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              type="button"
                            >
                              Close
                            </button>
                          </t>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Portal>
            </t>
          </CodeAssignmentModal>
        </Form(CodeAssignmentModal)>
      </Connect(Form(CodeAssignmentModal))>
    </ReduxForm>
  </Provider>
</CodeAssignmentModalWrapper>
`;
